@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

    http
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .csrf(c -> c.disable())
        .authorizeHttpRequests(authorize -> authorize
            // Login p√∫blico
            .requestMatchers(HttpMethod.POST, "/api/auth").permitAll()

            // Criar Gerente: permitido para ADMIN e GERENTE
            .requestMatchers(HttpMethod.POST, "/api/gerente").hasAnyRole("ADMIN", "GERENTE")

            // Listar Gerentes: qualquer autenticado
            .requestMatchers(HttpMethod.GET, "/api/gerente").authenticated()

            // Buscar por ID: qualquer autenticado
            .requestMatchers(HttpMethod.GET, "/api/gerente/{id}").authenticated()

            // Atualizar gerente: apenas ADMIN
            .requestMatchers(HttpMethod.PUT, "/api/gerente/{id}").hasRole("ADMIN")

            // Excluir gerente: apenas ADMIN
            .requestMatchers(HttpMethod.DELETE, "/api/gerente/{id}").hasRole("ADMIN")

            // Qualquer outra rota exige autentica√ß√£o
            .anyRequest().authenticated()
        )
        .sessionManagement(session -> session
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        )
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

    return http.build();
}
@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {

    http
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .csrf(csrf -> csrf.disable())
        .authorizeHttpRequests(auth -> auth

            // Login p√∫blico
            .requestMatchers(HttpMethod.POST, "/api/auth").permitAll()

            // Criar Gerente: ADMIN ou GERENTE
            .requestMatchers(HttpMethod.POST, "/api/gerente").hasAnyRole("ADMIN", "GERENTE")

            // Listar e buscar gerentes: autenticado
            .requestMatchers(HttpMethod.GET, "/api/gerente", "/api/gerente/{id}").authenticated()

            // Atualizar/excluir gerente: ADMIN
            .requestMatchers(HttpMethod.PUT, "/api/gerente/{id}").hasRole("ADMIN")
            .requestMatchers(HttpMethod.DELETE, "/api/gerente/{id}").hasRole("ADMIN")

            // Consultar livros: qualquer autenticado
            .requestMatchers(HttpMethod.GET, "/api/livros").authenticated()

            // Qualquer outra requisi√ß√£o: exige autentica√ß√£o
            .anyRequest().authenticated()
        )
        .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

    return http.build();
}

‚úÖ 1. Interface GerenteRepository
Voc√™ vai usar Spring Data JPA. Basta criar um m√©todo com a anota√ß√£o @Query para a busca personalizada:

java
Copiar
Editar
package br.com.seuprojeto.repositorio;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import br.com.seuprojeto.modelo.Gerente;

public interface GerenteRepository extends JpaRepository<Gerente, Long> {

    @Query("SELECT g FROM Gerente g WHERE LOWER(g.nome) LIKE LOWER(CONCAT('%', :nome, '%'))")
    List<Gerente> filtrarPorNomeAproximado(String nome);

}
üîç Explica√ß√£o:
LOWER(g.nome) LIKE LOWER(CONCAT('%', :nome, '%')) ‚Üí permite busca sem case sensitive e parcial.

Exemplo: se o nome for "mar", ele retorna "Marcos", "Maria", "Romarinho", etc.

N√£o h√° ORDER BY, ent√£o os resultados n√£o ser√£o ordenados.
‚úÖ 2. Como chamar isso no seu GerenteService ou Controller:
java
Copiar
Editar
List<Gerente> lista = gerenteRepository.filtrarPorNomeAproximado("mar");

@Query("SELECT g FROM Gerente g WHERE LOWER(g.nome) LIKE LOWER(CONCAT('%', :nome, '%')) 
ORDER BY g.dataNascimento DESC")
List<Gerente> filtrarPorNomeAproximadoOrdenadoDesc(String nome);
LIKE LOWER(CONCAT('%', :nome, '%')): busca aproximada sem diferenciar mai√∫sculas/min√∫sculas.

ORDER BY g.dataNascimento DESC: ordena da data mais recente para a mais antiga (mais novo primeiro).

ex.:List<Gerente> gerentes = gerenteRepository.filtrarPorNomeAproximadoOrdenadoDesc("jo√£o");

public void enviarEmailAprovacaoFornecedor(Fornecedor fornecedor) {

    String assuntoEmail = "Cadastro aprovado com sucesso";

    Context params = new Context();
    params.setVariable("nomeFornecedor", fornecedor.getNome());
    params.setVariable("dataAtual", LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
    params.setVariable("valorTotal", fornecedor.getValorLimite()); // supondo que o Fornecedor tem esse campo

    this.sendMailTemplate("aprova_fornecedor.html", fornecedor.getUsuario().getUsername(), assuntoEmail, params);
}
Optional<Fornecedor> optional = fornecedorRepository.findById(id);

if (optional.isPresent()) {
    enviarEmailAprovacaoFornecedor(optional.get());
} else {
    throw new EntidadeNaoEncontradaException("Fornecedor n√£o encontrado com ID: " + id);
}


01) Considerando as classes abaixo:


@Entity
@Table(name = "Livro")
@Builder
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Livro {
  
   @Id
   @GeneratedValue(strategy = GenerationType.SEQUENCE)
   private Long id;


   @Column
   private String titulo;


   @Column
   private String autor;


   @Column
   private Double preco;


}
...


@Entity
@Table(name = "Biblioteca")
@Builder
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Biblioteca extends  Livro
 {
  
   @Id
   @GeneratedValue(strategy = GenerationType.SEQUENCE)
   private Long id;


   @Column
   private String responsavel;


}
-------------------------------------------------------

a) Implemente um relacionamento de 1 - n (um para muitos) bidirecional entre as classes Livro e Biblioteca (C18 - Back-end - Relacionando Entidades) de forma que:
um livro tenha uma rela√ß√£o com biblioteca;
uma Biblioteca tenha uma lista de livros;

Copie o c√≥digo das classes, cole no quadro abaixo e incremente o c√≥digo de acordo com o solicitado pela quest√£o:  (1,0 ponto)

Resposta:

@OneToMany(mappedBy = "livro", orphanRemoval = true, fetch = FetchType.EAGER)
   private List<Biblioteca> biblioteca;

---------------------------------------------------------

b) Implemente as seguintes valida√ß√µes de banco de dados (Aula C20 - Valida√ß√µes no back-end):
Os campos titulo e autor da classe Livro n√£o podem ser nulos;
O campo responsavel da classe Biblioteca n√£o pode ser nulo;
O campo titulo da classe Livro deve ser √∫nico no banco de dados;

Copie o c√≥digo das classes, cole no quadro abaixo e incremente o c√≥digo de acordo com o solicitado pela quest√£o:  (0,5 ponto)

Resposta:

@NotNull(message = "O titulo √© de preenchimento obrigat√≥rio")
 @Column(unique = true)
private String titulo;
@NotNull(message = "O Autor  √© de preenchimento obrigat√≥rio")
private String autor;

 @Column
@NotNull(message = "O responsavel  √© de preenchimento obrigat√≥rio")
   private String responsavel;

--------------------------------------------------------------------------

c) Implemente na interface abaixo as seguintes consultas (Aula C25 - Implementando filtros de pesquisa):
Implemente uma consulta para filtrar todos os livros por autor. Esta consulta deve ignorar caracteres mai√∫sculos e min√∫sculos (caixa alta e caixa baixa). (0,5 ponto)
Implemente uma consulta para filtrar todos os livros por titulo e autor. Esta consulta deve ser exata, ou seja, s√≥ ir√° retornar os livros se o usu√°rio informar exatamente o titulo e o autor do livro. (0,5 ponto)

Resposta:

public interface LivroRepository extends JpaRepository<Livro, Long> {



@Query(value = "SELECT l FROM livros l WHERE l.autor = :autor")
   List<livro> consultarPorautor(String autor);


@Query(value = "SELECT l FROM livros l WHERE l.autor = :autor")
   List<livro> consultarPorautor(String autor);
   
}

----------------------------------------------------------------------------------
d) Considerando o m√©todo abaixo, modifique o c√≥digo para permitir (Aula C22 - Back-end - Controle de Acesso - Parte 1):

Acesso p√∫blico a rota (endpoint) que altera um Livro em LivroController: (0,5 ponto)

@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {


    http
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .csrf(c -> c.disable())
        .authorizeHttpRequests(authorize -> authorize


            .requestMatchers(HttpMethod.POST, "/api/livro").permitAll()
              


            .anyRequest().authenticated()


        )
        .sessionManagement((session) -> session
        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        )            
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);


    return http.build();
}
--------------------------------------------------------------------------------
02) Considerando as classes abaixo:


@Entity
@Table(name = "Gerente")
@Builder
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Gerente {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long id;


    @Column
    private String nome;


    @Column
    private LocalDate dataNascimento;
    
}

...


@Entity
@Table(name = "Departamento")
@Builder
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Departamento {
    
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Long id;


    @Column
    private Integer qtdFuncionarios;


}

------------------------------------------------------------------------
a) Implemente um relacionamento de 1 - 1 (um para um) unidirecional entre as classes Gerente e Departamento (C18 - Back-end - Relacionando Entidades) de forma que:
um departamento tenha um gerente;

Copie o c√≥digo das classes, cole no quadro abaixo e incremente o c√≥digo de acordo com o solicitado pela quest√£o:  (0,5 ponto)

Resposta:

@OneToOne
@JoinColumn(name = "gerente_id", referencedColumnName = "id")
private Gerente gerente;
--------------------------------------------------------------------------

b) Implemente no quadro abaixo a classe GerenteRequest com as seguintes valida√ß√µes na entrada das requisi√ß√µes
 (Aula C20 - Valida√ß√µes no back-end) (0,5 ponto):
O campo nome n√£o pode ser nulo ou vazio;
O campo nome n√£o pode ter mais que 100 caracteres;
O campo dataNascimento deve ser preenchido com uma data igual ou anterior a data de hoje;

Resposta:

 @Column
@NotBlank(message = "O campo nome  n√£o pode ser nulo ou vazio")
@Length(max = 100, message = "O campo nome tem que ter entre {max} caracteres")


    private String nome;

 @Column
@Past( message = ‚Äúdeve ser preenchido com uma data igual ou anterior a data de hoje‚Äù
    private LocalDate dataNascimento;

_____________________________________________________________________________

c) Implemente nas interfaces abaixos as seguintes consultas (Aula C25 - Implementando filtros de pesquisa):
Implemente uma consulta para filtrar todos os gerentes pelo nome. Retorne uma lista ordenada pela data de 
nascimento do Gerente. Esta consulta deve ser aproximada, ou seja, caso o usu√°rio informe s√≥ parte do nome 
do gerente, este dever√° ser retornado na consulta. (0,5 ponto)
Implemente uma consulta para filtrar todos os departamentos que tiverem uma quantidade de funcion√°rios maior que 60. (0,5 ponto)

Resposta:

// Reposit√≥rio para Gerente
public interface GerenteRepository extends JpaRepository<Gerente, Long> {

    // Consulta por nome (aproximada) e ordenada por data de nascimento
    @Query("SELECT g FROM Gerente g WHERE LOWER(g.nome) LIKE LOWER(CONCAT('%', :nome, '%')) ORDER BY g.dataNascimento")
    List<Gerente> consultarPorNomeAproximado(@Param("nome") String nome);
}

// Reposit√≥rio para Departamento
public interface DepartamentoRepository extends JpaRepository<Departamento, Long> {

    // Consulta para departamentos com mais de 60 funcion√°rios
    @Query("SELECT d FROM Departamento d WHERE d.qtdFuncionarios > 60")
    List<Departamento> consultarDepartamentosComMaisDe60Funcionarios();
}

---------------------------------------------------------------------------------

d) Considerando o m√©todo abaixo, modifique o c√≥digo para permitir (Aula C22 - Back-end - Controle de Acesso - Parte 1):

Que apenas usu√°rios que tenham o perfil de acesso ADMIN possam acessar a rota (endpoint) que remove um Gerente em GerenteController: (1,0 ponto)

@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {


    http
        .cors(cors -> cors.configurationSource(corsConfigurationSource()))
        .csrf(c -> c.disable())
        .authorizeHttpRequests(authorize -> authorize


        .requestMatchers(HttpMethod.POST, "/api/auth").permitAll()


            .anyRequest().authenticated()


        )
        .sessionManagement((session) -> session
        .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        )            
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);


    return http.build();
}


----------------------------------------------------------------------------------
03) Conforme estudamos na aula ‚ÄúC21 - Exibindo mensagens no front-end‚Äù, explique qual componente utilizamos no
 projeto do front-end para exibirmos as mensagens para os usu√°rios? Como ele foi utilizado? D√™ exemplos. (1,0 ponto)

Resposta:

Utiliazando a bibioteca  <ToastContainer /> , colocando no arquivo app.js e criamos e o diretorio
 src/views/util,  e criamos um arquivo chamado  util.js onde fica armazenadas  as as menssagens onde podemos 
 escolher a cor e  posicionar as menssagens exibidas em seguida √© adiconar as modifica√ß√µes nos arquivos de 
 cliente e entregador e produto.
 
 ----------------------------------------------------------------------------------

04) Na aula ‚ÄúC26 - Envio de e-mails com Templates Thymeleaf‚Äù, implementamos um m√©todo que foi chamado pelo save da classe ClienteService e que envia um email para o cliente ap√≥s seu cadastro (c√≥digo abaixo):

public void enviarEmailConfirmacaoCadastroCliente(Cliente cliente) {

    String assuntoEmail = "Bem vindo ao nosso aplicativo";

    Context params = new Context();
    params.setVariable("cliente", cliente);

    this.sendMailTemplate("bem_vindo_cliente.html", cliente.getUsuario().getUsername(), assuntoEmail, params);
}

-----------------------------------------------------------------------------------
Seguindo esta l√≥gica, ao considerar o HTML abaixo do arquivo aprova_fornecedor.html: 

...

<table>
   <tr>
      <td>
         <p>Prezado <span th:text="${nomeFornecedor} ?: ''"></span></p>
	  <p>Seu cadastro foi aprovador no nosso sistema de an√°lise</p>
	  <p>A partir de <span th:text="${dataAtual} ?: ''">, voc√™ est√° autorizado a comprar em nossos sistemas um valor total de <span th:text="${valorTotal} ?: ''"> reais at√© o fim deste ano</p>
      </td>
   </tr>
</table>


Implemente o m√©todo abaixo para enviar email para o fornecedor, preenchendo os par√¢metros necess√°rios do arquivo aprova_fornecedor.html. (1,0 ponto)

Resposta:

public void enviarEmailAprovacaoFornecedor(Fornecedor fornecedor) {

}
----------------------------------------------------------------------------
05) Conforme estudamos na aula ‚ÄúC30 - Documentando a API com Swagger‚Äù, explique qual biblioteca utilizamos no projeto do back-end para documenta√ß√£o da nossa API? D√™ exemplos de como documentar uma rota em uma classe Controller. (1,0 ponto)

Resposta:


Springdoc , utilisando a dependecia do spring boot e as anota√ßoes  de  @Tag(
    name = "API Cliente",
    description = "API respons√°vel pelos servidos de cliente no sistema"
)

  @Operation(
       summary = "Servi√ßo respons√°vel por salvar um cliente no sistema.",
       description = "Exemplo de descri√ß√£o de um endpoint respons√°vel por inserir um cliente no sistema."
   )
desse jeito 

-----------------------------------------------------------------------------

06) Criamos na raiz do nosso projeto um arquivo chamado docker-compose.yml. Explique qual √© a utilidade deste
 arquivo em nosso projeto e porque ele precisa ser executado no servidor que estaremos fazendo deploy da aplica√ß√£o (aula C31 - Implantando os Projetos no Servidor). (1,0 ponto)

Resposta:

A utilidade desse arquivo  s√£o as configuracoes do nome do banco e senha que s√£o esseciais para conectar
 como banco de dados al√©m de informar a porta do banco para ser feita a conex√£o 
------------------------------------------------------------------------------

07)O que √© .env?
.env significa "environment" (ambiente).

√â um arquivo onde voc√™ guarda senhas, URLs, chaves secretas e outras configura√ß√µes fora do c√≥digo.

Evita expor informa√ß√µes ens√≠veis e facilita a troca de ambiente (desenvolvimento, produ√ß√£o etc).

--------------------------------------------------------------------------------- 
08) Implemente um relacionamento de 1 - N bidirecional entre as classes Categoria e Produto:

Uma categoria pode conter v√°rios produtos;

Um produto pertence a uma √∫nica categoria.

‚úÖ Resposta:
java
Copiar c√≥digo
// Categoria.java
@OneToMany(mappedBy = "categoria", cascade = CascadeType.ALL, orphanRemoval = true)
private List<Produto> produtos;

// Produto.java
@ManyToOne
@JoinColumn(name = "categoria_id")
private Categoria categoria;
---------------------------------------------------------------------
üîπ Pergunta b)
Implemente as seguintes valida√ß√µes:

O campo nome da classe Produto n√£o pode ser nulo, vazio e deve ter no m√°ximo 50 caracteres;

O campo preco da classe Produto n√£o pode ser negativo.

‚úÖ Resposta:
java
Copiar c√≥digo
@NotBlank(message = "O nome √© de preenchimento obrigat√≥rio")
@Length(max = 50, message = "O nome deve ter no m√°ximo {max} caracteres")
private String nome;

@PositiveOrZero(message = "O pre√ßo n√£o pode ser negativo")
private Double preco;
-----------------------------------------------------------------------
üîπ Pergunta c)
Implemente no reposit√≥rio ProdutoRepository:

Uma consulta que filtre produtos por parte do nome, sem considerar letras mai√∫sculas ou min√∫sculas. Ordene por pre√ßo.

Uma consulta que retorne todos os produtos de uma categoria espec√≠fica, recebendo o nome da categoria como par√¢metro.

‚úÖ Resposta:
java
Copiar c√≥digo
@Query("SELECT p FROM Produto p WHERE LOWER(p.nome) LIKE LOWER(CONCAT('%', :nome, '%')) ORDER BY p.preco")
List<Produto> buscarPorNome(@Param("nome") String nome);

@Query("SELECT p FROM Produto p WHERE p.categoria.nome = :nomeCategoria")
List<Produto> buscarPorCategoria(@Param("nomeCategoria") String nomeCategoria);
------------------------------------------------------------------------
‚úÖ Exerc√≠cio 2 ‚Äì Relacionamento 1-1 e Seguran√ßa com Spring Security
üîπ Pergunta a)
Implemente um relacionamento de 1 - 1 bidirecional entre as classes Aluno e Carteirinha:

Cada aluno possui uma carteirinha;

A carteirinha pertence a um √∫nico aluno.

‚úÖ Resposta:
java
Copiar c√≥digo
// Aluno.java
@OneToOne(mappedBy = "aluno", cascade = CascadeType.ALL)
private Carteirinha carteirinha;

// Carteirinha.java
@OneToOne
@JoinColumn(name = "aluno_id")
private Aluno aluno;
--------------------------------------------------------------------------------------
üîπ Pergunta b)
Implemente a classe AlunoRequest com as seguintes valida√ß√µes:

O campo nome √© obrigat√≥rio e deve conter no m√°ximo 100 caracteres;

O campo email deve estar em um formato v√°lido.

‚úÖ Resposta:
java
Copiar c√≥digo
@NotBlank(message = "O nome √© obrigat√≥rio")
@Length(max = 100, message = "O nome deve ter no m√°ximo {max} caracteres")
private String nome;

@Email(message = "Formato de e-mail inv√°lido")
private String email;
-------------------------------------------------------------------------
üîπ Pergunta c)
Modifique o c√≥digo do SecurityFilterChain para:

Permitir acesso p√∫blico √† rota de cadastro de aluno (POST /api/aluno/cadastrar);

Permitir apenas usu√°rios com o perfil ADMIN acessarem a exclus√£o de alunos (DELETE /api/aluno/{id}).

‚úÖ Resposta:
java
Copiar c√≥digo
@Bean
public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
    http
        .csrf(csrf -> csrf.disable())
        .authorizeHttpRequests(auth -> auth
            .requestMatchers(HttpMethod.POST, "/api/aluno/cadastrar").permitAll()
            .requestMatchers(HttpMethod.DELETE, "/api/aluno/{id}").hasRole("ADMIN")
            .anyRequest().authenticated()
        )
        .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
        .authenticationProvider(authenticationProvider)
        .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
    return http.build();
}
--------------------------------------------------------------------------------
‚úÖ Exerc√≠cio 3 ‚Äì Consultas Personalizadas com @Query
üîπ Pergunta a)
Na interface AlunoRepository:

Consulta que filtre alunos por nome (parcial e case insensitive), ordenados por data de nascimento;

Consulta que retorne alunos com e-mail @ifpe.edu.br.

‚úÖ Resposta:
java
Copiar c√≥digo
@Query("SELECT a FROM Aluno a WHERE LOWER(a.nome) LIKE LOWER(CONCAT('%', :nome, '%')) ORDER BY a.dataNascimento")
List<Aluno> buscarPorNome(@Param("nome") String nome);

@Query("SELECT a FROM Aluno a WHERE a.email LIKE '%@ifpe.edu.br'")
List<Aluno> buscarPorEmailIfpe();
---------------------------------------------
üîπ Pergunta b)
Na interface CarteirinhaRepository:

Consulta para carteirinhas emitidas ap√≥s uma data;

Consulta para carteirinha de aluno com nome exato.

‚úÖ Resposta:
java
Copiar c√≥digo
@Query("SELECT c FROM Carteirinha c WHERE c.dataEmissao > :data")
List<Carteirinha> buscarPorDataEmissao(@Param("data") LocalDate data);

@Query("SELECT c FROM Carteirinha c WHERE c.aluno.nome = :nome")
Carteirinha buscarPorNomeAluno(@Param("nome") String nome);

-------------------------------------------------------------------------
‚úÖ Exerc√≠cio 4 ‚Äì Envio de E-mail com Template Thymeleaf
üîπ Pergunta a)
Implemente o m√©todo enviarEmailBoasVindas(Aluno aluno) com os campos do template:

nomeAluno, dataCadastro, matricula.

Assunto do e-mail: "Bem-vindo(a) √† nossa escola!"

‚úÖ Resposta:
java
Copiar c√≥digo
public void enviarEmailBoasVindas(Aluno aluno) {
    String assuntoEmail = "Bem-vindo(a) √† nossa escola!";

    Context context = new Context();
    context.setVariable("nomeAluno", aluno.getNome());
    context.setVariable("dataCadastro", LocalDate.now());
    context.setVariable("matricula", aluno.getMatricula());

    sendMailTemplate("boas_vindas.html", aluno.getEmail(), assuntoEmail, context);
}
------------------------------------------------------------------------
‚úÖ Exerc√≠cio 5 ‚Äì Documenta√ß√£o com Swagger
üîπ Pergunta a)
Explique:

Qual biblioteca usamos para Swagger?

Como documentar um endpoint com @Tag e @Operation?

‚úÖ Resposta:
Biblioteca usada: springdoc-openapi

Exemplo:

java
Copiar c√≥digo
@Tag(name = "API Aluno", description = "Gerencia os alunos do sistema")
@RestController
@RequestMapping("/api/aluno")
public class AlunoController {

    @Operation(
        summary = "Cadastrar novo aluno",
        description = "Servi√ßo respons√°vel por cadastrar aluno no sistema"
    )
    @PostMapping("/cadastrar")
    public ResponseEntity<Void> cadastrar(@RequestBody AlunoRequest request) {
        // l√≥gica
    }
}
--------------------------------------------------------------------------
‚úÖ Exerc√≠cio 6 ‚Äì Arquivo docker-compose.yml
üîπ Pergunta a)
Explique:

Para que serve o docker-compose.yml?

Por que ele precisa estar no servidor?

‚úÖ Resposta:
O docker-compose.yml permite configurar todos os containers necess√°rios para a aplica√ß√£o (ex: banco + back-end).

No servidor, ele garante que a infraestrutura ser√° criada e iniciada com um √∫nico comando (docker-compose up), facilitando o deploy.
-----------------------------------------------------------------------------------------
üîπ Pergunta b)
Crie um arquivo docker-compose.yml com PostgreSQL e Spring Boot conectando ao banco.

‚úÖ Resposta:
yaml
Copiar c√≥digo
version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: meu_banco
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: senha
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  app:
    build: .
    container_name: spring_app
    depends_on:
      - postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/meu_banco
      SPRING_DATASOURCE_USERNAME: usuario
      SPRING_DATASOURCE_PASSWORD: senha
    ports:
      - "8080:8080"

volumes:
  postgres_data:

  O Postman √© uma ferramenta usada principalmente para testar APIs
   (interfaces de programa√ß√£o de aplica√ß√µes). Ele √© muito √∫til para desenvolvedores 
   ackend, frontend e testers que precisam interagir com APIs de forma pr√°tica

   Principais fun√ß√µes do Postman:
Testar requisi√ß√µes HTTP:

Enviar requisi√ß√µes GET, POST, PUT, DELETE, entre outras, para um servidor.

Ver o que a API responde (status, corpo da resposta, headers etc.).

Simular o comportamento do seu sistema:

Voc√™ pode testar manualmente o funcionamento de uma API antes mesmo de ter o front-end finalizado.

Enviar dados no corpo da requisi√ß√£o:

JSON, formul√°rio, texto, arquivos etc.

√ötil, por exemplo, para cadastrar usu√°rios ou autenticar com login e senha.

Testar com autentica√ß√£o:

Suporta token JWT, Basic Auth, Bearer Token, entre outros tipos.

Organizar cole√ß√µes de testes:

Voc√™ pode salvar v√°rias requisi√ß√µes organizadas em cole√ß√µes e ambientes (ex: desenvolvimento, produ√ß√£o).

Automatizar testes:

Com scripts, d√° para criar testes automatizados para verificar se os endpoints est√£o funcionando corretamente.

Gerar documenta√ß√£o autom√°tica:

A partir de uma cole√ß√£o de requisi√ß√µes, o Postman pode gerar documenta√ß√£o da API.

üß† Em resumo:
O Postman serve para testar, depurar e documentar APIs de forma simples e eficiente, sem precisar programar um sistema inteiro s√≥ para isso.

Se quiser, posso te mostrar um exemplo de requisi√ß√£o no Postman. Deseja?

O Docker √© uma plataforma que serve para criar, empacotar, distribuir e executar aplica√ß√µes em ambientes isolados chamados de containers.

‚úÖ Para que serve o Docker?
Empacotar aplica√ß√µes com tudo que elas precisam

O Docker coloca sua aplica√ß√£o, bibliotecas, depend√™ncias e configura√ß√µes em um "container", que √© como uma mini-m√°quina virtual.

Isso garante que ela vai rodar igual em qualquer lugar: no seu PC, no servidor ou na nuvem.

Evitar problemas de "na minha m√°quina funciona"

Como o container leva tudo que a aplica√ß√£o precisa, n√£o importa se o sistema operacional √© diferente.

Facilitar a instala√ß√£o de ambientes

Exemplo: voc√™ pode subir um banco de dados PostgreSQL com um √∫nico comando, sem precisar instalar nada no seu sistema operacional.

Automatizar ambientes de desenvolvimento, teste e produ√ß√£o

√â muito usado para montar rapidamente ambientes padronizados para desenvolvedores ou para executar testes autom√°ticos.

Desempenho melhor que m√°quinas virtuais

Containers s√£o mais leves e r√°pidos que VMs porque compartilham o mesmo kernel do sistema operacional.

Integra√ß√£o com DevOps e CI/CD

Docker √© amplamente usado em pipelines de integra√ß√£o e entrega cont√≠nua.

üß† Em resumo:
O Docker serve para garantir que sua aplica√ß√£o rode de forma previs√≠vel e isolada, em qualquer lugar, de forma leve, r√°pida e automatiz√°vel.

