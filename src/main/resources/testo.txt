) Considerando as duas classes abaixo, responda:

public class Cliente {
   
    @ManyToOne
    @JoinColumn(nullable = false)
    private Usuario usuario;

    @Column(nullable = false, length = 100)
    private String nome;
    
    @Column
    private LocalDate dataNascimento;

    @Column(unique = true)
    private String cpf;

    @Column
    private String fone;

    @Column
    private String foneAlternativo;
  
}
	public class ClienteRequest {

    @NotNull(message = "O Nome é de preenchimento obrigatório")
    @NotBlank(message = "O Nome é de preenchimento obrigatório")
    private String nome;

    @NotBlank(message = "O e-mail é de preenchimento obrigatório")
    @Email
    private String email;

    @NotBlank(message = "A senha é de preenchimento obrigatório")
    private String password;
    
    @NotNull(message = "O CPF é de preenchimento obrigatório")
    @NotBlank(message = "O CPF é de preenchimento obrigatório")
    @CPF
    private String cpf;
    
    @JsonFormat(pattern = "dd/MM/yyyy")
    private LocalDate dataNascimento;

    private String fone;

    privamessagenste String foneAlternativo;

}

a) Como pode ser observado, as duas classes possuem anotações de validação colocadas em determinados atributos da classe. Qual a diferença entre colocar essas validações na classe Cliente e colocar na classe ClienteRequest ?  (0,5 ponto)

Resposta: As validações na classe ClienteRequest são usadas para verificar se os dados recebidos
 de uma requisição HTTP estão corretos antes de chegar à lógica de negócio. Já as validações
  na classe Cliente garantem a integridade dos dados no banco de dados. Usar as validações no 
  DTO (como @NotNull, @Email, etc.) permite retornar erros amigáveis para o usuário, enquanto no
   modelo de entidade essas validações estão mais relacionadas a restrições de persistência.

  




b) Explique o que significa cada validação colocada nas classes acima. (0,5 ponto)

Resposta:@NotNull: o campo não pode ser nulo.

@NotBlank: o campo não pode ser vazio ou conter apenas espaços.

@Email: o valor deve seguir o formato de e-mail válido.

@CPF: o valor deve ser um CPF válido conforme os dígitos verificadores.

@JsonFormat(pattern = "dd/MM/yyyy"): 
define o formato da data na serialização e desserialização JSON.

c) Qual seria a validação que precisaríamos acrescentar ao campo foneAlternativo para validar
 o tamanho máximo do campo para não permitir mais que 30 caracteres?  (0,5 ponto)

Resposta:@Size(max = 30, message = "O telefone alternativo não pode ultrapassar 30 caracteres")
private String foneAlternativo;






02) Considerando os conceitos aprendidos na aula “C18 - Back-end - Relacionando Entidades”, implemente um relacionamento de “um para muitos” bidirecional entre as classes Empresa e Cliente de forma que:
⦁	um cliente tenha uma empresa;
⦁	uma empresa tenha uma lista de clientes

Faça a alteração no código das classes abaixo  (1,0 ponto)

public class Cliente extends EntidadeAuditavel {



    @Column(nullable = false, length = 100)
    private String nome;
    
    @Column
    private LocalDate dataNascimento;

    @Column(unique = true)
    private String cpf;

    @Column
    private String fone;

    @Column
    private String foneAlternativo;

@OneToMany(mappedBy = "cliente", orphanRemoval = true, fetch = FetchType.EAGER)
private List<EnderecoCliente> enderecos;
    
}	public class Empresa extends EntidadeAuditavel {

@JsonIgnonore
@ManyToOne
private Cliente cliente;

   
    @Column
    private String site;

    @Column
    private String cnpj;

    @Column
    private String inscricaoEstadual;

    @Column
    private String nomeEmpresarial;

    @Column
    private String nomeFantasia;

    @Column
    private String fone;

    @Column
    private String foneAlternativo;

}




03) Considerando o método abaixo, modifique o código para permitir:

⦁	Acesso público ao endpoint no Controller que consulta uma empresa por ID. (0,5 ponto)

   @Bean
   public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

       http
               .httpBasic().disable().csrf().disable().cors().and().sessionManagement()
               .sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().exceptionHandling() .cliente() .id()
               .authenticationEntryPoint(authenticationEntryPoint).and().authorizeRequests()

               .antMatchers(AUTH_WHITELIST).permitAll()

               .anyRequest()
               .hasAnyAuthority(Usuario.ROLE_CLIENTE, Usuario.ROLE_EMPRESA, Usuario.ROLE_CLIENTE)
               .and().addFilterBefore(
                       new JwtTokenAuthenticationFilter(jwtTokenProvider),
                       UsernamePasswordAuthenticationFilter.class);

       return http.build();
   }



04) No contexto da aula de Controle de Acesso, qual a diferença entre autenticação, autorização e auditoria? (1,0 ponto)

Resposta:


 



05) Durante a implementação do projeto trabalhado ao longo da disciplina nós criamos um
 arquivo .env e o colocamos na raiz do projeto. Responda:

a) Para que serve este arquivo? Qual a vantagem/importância dele? (0,5 ponto)

Resposta:O arquivo .env armazena variáveis de ambiente, como senhas, tokens e
 configurações sensíveis, fora do código-fonte. Isso permite manter os dados confidenciais
 seguros e facilita a alteração de configurações sem recompilar o projeto.




b) No arquivo onde definimos as configurações do projeto, escreva abaixo a linha em que informamos ao spring que o projeto poderá utilizar (ou não) um arquivo .env  (0,5 ponto)

Resposta:spring.config.import=optional:classpath:.env







06) Observando o código abaixo, responda: 

“caso ocorra um erro e seja levantado alguma exceção na linha 9, os objetos inseridos nas linhas 4 e 7 serão gravados no banco de dados, pois os comandos são executados antes da linha 9.”

A afirmação acima é verdadeira? Justifique sua resposta. (1,0 ponto)

1
2
3
4
5
6
7
8
9
10
11
12	@Transactional
public Cliente save(Cliente cliente) {

    usuarioService.save(cliente.getUsuario());
	
    super.preencherCamposAuditoria(cliente);
    Cliente clienteSalvo = repository.save(cliente);
	
    emailService.enviarEmailConfirmacaoCadastroCliente(clienteSalvo);
	
    return clienteSalvo;
}

Resposta:


 Falsa.
Porque o método está anotado com @Transactional. Isso significa que, se uma exceção for lançada
 na linha 9, todo o bloco será desfeito (rollback), e nenhum dado será persistido no banco,
 inclusive os objetos das linhas 4 e 7.



07) Observando o código abaixo, responda: 

“Após criada esta interface (ClienteRepository), já é possível ter acesso a métodos para consultar um cliente por id, consultar todos os clientes, incluir, alterar e remover um cliente no banco de dados.”

A afirmação acima é verdadeira? Justifique sua resposta. (1,0 ponto)

1
2
3
4
5
6
7
8
9
10	package br.com.ifpe.oxefood.modelo.cliente;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;

public interface ClienteRepository extends JpaRepository<Cliente, Long>,JpaSpecificationExecutor<Cliente> {

    
}

Resposta:
Verdadeira.
Ao estender JpaRepository, a interface ClienteRepository já herda os métodos padrão como 
findById, findAll, save, deleteById, entre outros. Isso permite consultar, 
salvar, atualizar e excluir registros sem escrever SQL


08) Considerando a classe abaixo:

1
2
3
4
5
6
7	public class CategoriaProduto extends EntidadeAuditavel {

    @NotNull
    @Column(nullable = false, length = 100)
    private String descricao;

}

a) O código abaixo funciona? Se não funcionar, explique o porquê. (0,5 ponto)

1
2
3
4
5	public interface CategoriaProdutoRepository extends JpaRepository<CategoriaProduto, Long> {

    List<CategoriaProduto> findByChaveEmpresaOrderByNome(String chaveEmpresa);

}

Resposta:
Não funciona.
O campo nome não existe na entidade CategoriaProduto,
 o método tentará ordenar por um atributo inexistente.


b) O código abaixo funciona? Se não funcionar, explique o porquê. (0,5 ponto)

1
2
3
4
5	public interface CategoriaProdutoRepository extends JpaRepository<CategoriaProduto, Long> {

    List<CategoriaProduto> findByChaveEmpresaOrderByDescricao();

}

Resposta:
Não funciona.
A assinatura está incorreta porque falta o parâmetro da chave estrangeira chaveEmpresa.o certo
 seria:
List<CategoriaProduto> findByChaveEmpresaOrderByDescricao(String chaveEmpresa);

09) Na aula de controle de acesso do projeto do front-end, implementamos um componente para 
restringir o acesso não autenticado às telas do sistema, posteriormente esse componente foi 
adicionado em cada definição <Route> no arquivo Rotas.js. Qual foi o componente criado e como
 ele foi utilizado no arquivo Rotas.js ? (1,0 ponto)

Resposta:O componente criado foi o PrivateRoute (ou RotaPrivada). Ele foi usado no arquivo Rotas.
js para proteger as rotas, permitindo acesso apenas a usuários autenticados.
<Route path="/clientes" element={<PrivateRoute><Clientes /></PrivateRoute>} />

10) O que é uma API WEB considerada RESTful? (1,0 ponto)

Resposta:
Uma API RESTful é um serviço web que segue os princípios REST (Representational State Transfer).
 Ela permite acessar e manipular recursos (como clientes, produtos, etc.) usando métodos HTTP 
 (GET, POST, PUT, DELETE), através de URLs padronizadas,
 de forma stateless (sem manter estado entre requisições) e com respostas geralmente em JSON.





