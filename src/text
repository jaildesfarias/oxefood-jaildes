O controller (EntregadorController) recebe a requisição e chama o service.

O service (EntregadorService) aplica regras e salva via repository.

O repository (EntregadorRepository) acessa diretamente o banco com JPA.


 OcampostatusVenda deve ser implementado com um <Form.Select> e exibir
 as seguintes opções para o usuário:
 ○ Pedido Cancelado
 ○ Aguardando Pagamento
 ○ Pago
 ○ Entregue
<Form.Select
  required
  fluid
  label='Status da Venda'
  options={[
    { key: 'c', text: 'Pedido Cancelado', value: 'Pedido Cancelado' },
    { key: 'a', text: 'Aguardando Pagamento', value: 'Aguardando Pagamento' },
    { key: 'p', text: 'Pago', value: 'Pago' },
    { key: 'e', text: 'Entregue', value: 'Entregue' },
  ]}
  placeholder='Selecione o status'
  value={statusVenda}
  onChange={(e, { value }) => setStatusVenda(value)}
/>

 Adicione uma máscara para o input do campo dataVenda
 ● Ocampo retiradaEmLoja deve ser implementado com um <Form.Radio> e
 conter as opções sim e não;
 1. Campo dataVenda com máscara (usando InputMask):
 <Form.Field required>
  <label>Data da Venda</label>
  <InputMask
    mask="99/99/9999"
    placeholder="DD/MM/AAAA"
    value={dataVenda}
    onChange={e => setDataVenda(e.target.value)}
  >
    {(inputProps) => <Form.Input {...inputProps} />}
  </InputMask>
</Form.Field>
<Form.Group inline required>
  <label>Retirada em Loja</label>
  <Form.Radio
    label='Sim'
    value={true}
    checked={retiradaEmLoja === true}
    onChange={() => setRetiradaEmLoja(true)}
  />
  <Form.Radio
    label='Não'
    value={false}
    checked={retiradaEmLoja === false}
    onChange={() => setRetiradaEmLoja(false)}
  />
</Form.Group>
tem que.: import InputMask from "react-input-mask";

 2. Campo retiradaEmLoja com opções "Sim" e "Não" usando <Form.Radio>:

  funcionalidade de listar todas as Vendas armazenadas no banco (implementar no
 back-end e no front-end). Na tabela da listagem, não exibir o campo observacao, os
 outros podem ser exibidos normalmente.
 package com.seu.pacote.controller;

import com.seu.pacote.model.Venda;
import com.seu.pacote.service.VendaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class VendaController {

    @Autowired
    private VendaService vendaService;

    // Endpoint para listar todas as vendas
    @GetMapping("/api/vendas")
    public List<Venda> getAllVendas() {
        return vendaService.getAllVendas();
    }
}
22.) A funcionalidade de remover Venda (implementar no back-end e no front-end) (1,0
 ponto)
 package com.seu.pacote.controller;

import com.seu.pacote.service.VendaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class VendaController {

    @Autowired
    private VendaService vendaService;

    // Endpoint para deletar uma venda
    @DeleteMapping("/api/venda/{id}")
    public void deleteVenda(@PathVariable Long id) {
        vendaService.deleteVenda(id);
    }
}
33 .: Implemente na tela de listagem um botão que ficará ao lado dos botões de alterar e
 remover, e que ao ser clicado, exibe o valor do campo observacao da venda em um
 Modal (implementar no front-end) 
 import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Table, Button, Modal, Icon } from 'semantic-ui-react';
import { Link } from 'react-router-dom';

export default function ListVendas() {
  const [vendas, setVendas] = useState([]);
  const [modalOpen, setModalOpen] = useState(false);
  const [vendaToDelete, setVendaToDelete] = useState(null);
  const [observacaoModal, setObservacaoModal] = useState(''); // Estado para armazenar a observação da venda

  useEffect(() => {
    // Função para listar as vendas
    axios.get("http://localhost:8080/api/vendas")
      .then(response => {
        setVendas(response.data);
      })
      .catch(error => {
        console.error("Erro ao listar vendas", error);
      });
  }, []);

  // Função para remover uma venda
  const removeVenda = (id) => {
    axios.delete(`http://localhost:8080/api/venda/${id}`)
      .then(() => {
        setVendas(vendas.filter(venda => venda.id !== id));  // Remove da lista local
        setModalOpen(false);  // Fecha o modal
      })
      .catch((error) => {
        console.error("Erro ao remover a venda", error);
      });
  };

  // Função para abrir o modal de confirmação de remoção
  const handleDeleteClick = (venda) => {
    setVendaToDelete(venda);
    setModalOpen(true);
  };

  // Função para abrir o Modal de Observação
  const handleObservacaoClick = (observacao) => {
    setObservacaoModal(observacao); // Armazena a observação da venda no estado
    setModalOpen(true); // Abre o modal
  };

  return (
    <div>
      <h2>Lista de Vendas</h2>
      <Table celled>
        <Table.Header>
          <Table.Row>
            <Table.HeaderCell>ID</Table.HeaderCell>
            <Table.HeaderCell>Produto</Table.HeaderCell>
            <Table.HeaderCell>Quantidade</Table.HeaderCell>
            <Table.HeaderCell>Valor Unitário</Table.HeaderCell>
            <Table.HeaderCell>Data da Venda</Table.HeaderCell>
            <Table.HeaderCell>Status</Table.HeaderCell>
            <Table.HeaderCell>Retirada em Loja</Table.HeaderCell>
            <Table.HeaderCell>Ações</Table.HeaderCell>
          </Table.Row>
        </Table.Header>

        <Table.Body>
          {vendas.map((venda) => (
            <Table.Row key={venda.id}>
              <Table.Cell>{venda.id}</Table.Cell>
              <Table.Cell>{venda.produto}</Table.Cell>
              <Table.Cell>{venda.quantidade}</Table.Cell>
              <Table.Cell>{venda.valorUnitario}</Table.Cell>
              <Table.Cell>{venda.dataVenda}</Table.Cell>
              <Table.Cell>{venda.statusVenda}</Table.Cell>
              <Table.Cell>{venda.retiradaEmLoja ? 'Sim' : 'Não'}</Table.Cell>
              <Table.Cell>
                <Link to={`/edit-venda/${venda.id}`}>
                  <Button color='blue'>Editar</Button>
                </Link>
                <Button color='red' onClick={() => handleDeleteClick(venda)}>
                  <Icon name='trash' /> Remover
                </Button>
                {/* Botão para exibir a observação */}
                <Button color='teal' onClick={() => handleObservacaoClick(venda.observacao)}>
                  <Icon name='eye' /> Visualizar Observação
                </Button>
              </Table.Cell>
            </Table.Row>
          ))}
        </Table.Body>
      </Table>

      {/* Modal para confirmação de exclusão */}
      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        basic
      >
        <Modal.Header>Tem certeza que deseja remover esta venda?</Modal.Header>
        <Modal.Actions>
          <Button basic color='red' inverted onClick={() => setModalOpen(false)}>
            <Icon name='remove' /> Não
          </Button>
          <Button color='green' inverted onClick={() => removeVenda(vendaToDelete.id)}>
            <Icon name='checkmark' /> Sim
          </Button>
        </Modal.Actions>
      </Modal>

      {/* Modal para exibir a observação */}
      <Modal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        basic
      >
        <Modal.Header>Observação da Venda</Modal.Header>
        <Modal.Content>
          <p>{observacaoModal}</p>
        </Modal.Content>
        <Modal.Actions>
          <Button basic color='red' inverted onClick={() => setModalOpen(false)}>
            <Icon name='remove' /> Fechar
          </Button>
        </Modal.Actions>
      </Modal>
    </div>
  );
}
itemde ItemPedido	
pedido	Pedido
produto	Produto
quantidade	int
valorUnitarioItem	double
valorTotalItem	double
observacaoItem	String
import javax.persistence.*;
import java.io.Serializable;

@Entity
@Table(name = "item_pedido")
public class ItemPedido implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "pedido_id", nullable = false)
    private Pedido pedido;

    @ManyToOne
    @JoinColumn(name = "produto_id", nullable = false)
    private Produto produto;

    @Column(name = "quantidade", nullable = false)
    private Integer quantidade;

    @Column(name = "valor_unitario_item", nullable = false)
    private Double valorUnitarioItem;

    @Column(name = "valor_total_item", nullable = false)
    private Double valorTotalItem;

    @Column(name = "observacao_item", length = 500)
    private String observacaoItem;

    // Getters e Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Pedido getPedido() {
        return pedido;
    }

    public void setPedido(Pedido pedido) {
        this.pedido = pedido;
    }

    public Produto getProduto() {
        return produto;
    }

    public void setProduto(Produto produto) {
        this.produto = produto;
    }

    public Integer getQuantidade() {
        return quantidade;
    }

    public void setQuantidade(Integer quantidade) {
        this.quantidade = quantidade;
    }

    public Double getValorUnitarioItem() {
        return valorUnitarioItem;
    }

    public void setValorUnitarioItem(Double valorUnitarioItem) {
        this.valorUnitarioItem = valorUnitarioItem;
    }

    public Double getValorTotalItem() {
        return valorTotalItem;
    }

    public void setValorTotalItem(Double valorTotalItem) {
        this.valorTotalItem = valorTotalItem;
    }

    public String getObservacaoItem() {
        return observacaoItem;
    }

    public void setObservacaoItem(String observacaoItem) {
        this.observacaoItem = observacaoItem;
    }
}
import javax.persistence.*;
import java.io.Serializable;
import java.util.List;

@Entity
@Table(name = "pedido")
public class Pedido implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ItemPedido> itensPedido;

    // Outros campos do pedido, como data, status, etc.
    
    // Getters e Setters
}
import javax.persistence.*;
import java.io.Serializable;

@Entity
@Table(name = "produto")
public class Produto implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "nome", nullable = false)
    private String nome;

    @Column(name = "preco", nullable = false)
    private Double preco;

    // Getters e Setters
}



